/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity ^0.8.29;

/// #invariant certifier != address(0);
contract CertificateRegistry {
    event CertificateIssued(address student, string course, address issuer);

    struct Certificate {
        string course;
        address issuer;
    }

    address public certifier;
    address public pendingCertifier;
    mapping(address => Certificate) public certificates;

    constructor() {
        __ScribbleUtilsLib__122.setInContract(true);
        certifier = msg.sender;
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
    }

    function issueCertificate(address student, string calldata course) external {
        __ScribbleUtilsLib__122.setInContract(true);
        _original_CertificateRegistry_issueCertificate(student, course);
        unchecked {
            if (!(msg.sender == certifier)) {
                emit __ScribbleUtilsLib__122.AssertionFailed("001001:0067:000 1: ");
                assert(false);
            }
        }
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
    }

    function _original_CertificateRegistry_issueCertificate(address student, string calldata course) internal {
        certificates[student] = Certificate(course, msg.sender);
        (bool sent, ) = _callsite_58(student, 0, "");
        require(sent, "Notification failed");
        emit CertificateIssued(student, course, msg.sender);
    }

    function revokeCertificate(address student) external {
        __ScribbleUtilsLib__122.setInContract(true);
        _original_CertificateRegistry_revokeCertificate(student);
        unchecked {
            if (!(msg.sender == certifier)) {
                emit __ScribbleUtilsLib__122.AssertionFailed("001836:0067:000 2: ");
                assert(false);
            }
        }
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
    }

    function _original_CertificateRegistry_revokeCertificate(address student) internal {
        delete certificates[student];
    }

    function changeCertifier(address newCertifier) external {
        __ScribbleUtilsLib__122.setInContract(true);
        _original_CertificateRegistry_changeCertifier(newCertifier);
        unchecked {
            if (!(msg.sender == certifier)) {
                emit __ScribbleUtilsLib__122.AssertionFailed("002466:0067:000 3: ");
                assert(false);
            }
        }
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
    }

    function _original_CertificateRegistry_changeCertifier(address newCertifier) internal {
        certifier = newCertifier;
    }

    function acceptCertifierRole() external {
        __ScribbleUtilsLib__122.setInContract(true);
        _original_CertificateRegistry_acceptCertifierRole();
        unchecked {
            if (!((certifier == address(0)) || (certifier == msg.sender))) {
                emit __ScribbleUtilsLib__122.AssertionFailed("003102:0067:000 4: ");
                assert(false);
            }
        }
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
    }

    function _original_CertificateRegistry_acceptCertifierRole() internal {
        require(msg.sender == pendingCertifier, "Not pending certifier");
        certifier = pendingCertifier;
        pendingCertifier = address(0);
    }

    /// Check only the current contract's state invariants
    function __scribble_CertificateRegistry_check_state_invariants_internal() internal {
        unchecked {
            if (!(certifier != address(0))) {
                emit __ScribbleUtilsLib__122.AssertionFailed("003796:0067:000 0: ");
                assert(false);
            }
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_CertificateRegistry_check_state_invariants_internal();
    }

    function _callsite_58(address receiver, uint256 _value, bytes memory arg0) private returns (bool ret0, bytes memory ret1) {
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__122.setInContract(false);
        (ret0, ret1) = receiver.call{value: _value}(arg0);
        __ScribbleUtilsLib__122.setInContract(true);
    }
}

library __ScribbleUtilsLib__122 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}